# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!


# Let's skip auth for now, could identify as an area for improvement 
# @auth ...
# https://docs.amplify.aws/cli/graphql/authorization-rules/#public-data-access
# How to address:
# > As an Evolve agent - I want to be able to fetch and review a property listing


# > I want to be able to add 1+ rooms to my property (eg: Living Room, Bedroom 1, etc.)
enum PropertyType {
  HOUSE
  APARTMENT
  CABIN
  CAMPER
}


"""
 > I want to create a new property listing on this product
"""
type Property @model {
     
  # ðŸ›‘ Syntax Error: Expected Name, found BlockString "> Every GraphQL type with the @model directive will automatically have an id field set as the primary key.
  # https://docs.amplify.aws/cli/graphql/data-modeling/#configure-a-primary-key ".
  # id: ID!

  type: PropertyType!
  address: String!
    
  """ 
   > I want to be able to describe the property in some level detail (don't worry about photos for now)
  """ 
 description: String

    
  # Could use this approach:
  # bedrooms: Int!
  # bathrooms: Int!
  """
  > I want to be able to add 1+ rooms to my property (eg: Living Room, Bedroom 1, etc.)
  """
  rooms: [Room!]! @hasMany
    

    
  # Could use this approach:
  # wifi: Boolean!
  # parking: Boolean!
  """
  > I want to be able to add specific and multiple amenties to my property (eg: parking, hot tub, Wifi etc.)
  """
  features: [Feature!]! @hasMany

  # Could eventually do @hasMany
  # And could do many-to-many via joining Model 
  # https://docs.amplify.aws/cli-legacy/graphql-transformer/connection/#many-to-many-connections
  owner: Owner! @belongsTo

}


type Owner @model {
  # As a vacation property owner that wants to have Evolve manage my property -
  name: String!
  email: String!
  phone: String!

  properties: [Property!] @hasMany

}

# > I want to be able to add 1+ rooms to my property (eg: Living Room, Bedroom 1, etc.)
enum RoomType {
  BEDROOM
  BATHROOM
  KITCHEN
  LIVING_ROOM
}

type Room @model {
  
  # ðŸ›‘ Syntax Error: Expected Name, found BlockString "> Every GraphQL type with the @model directive will automatically have an id field set as the primary key.
  # https://docs.amplify.aws/cli/graphql/data-modeling/#configure-a-primary-key ".
  # id: ID!

  type: RoomType!
  # for other details like number of beds
  description: String
  # could also do:
  # beds: Int
  # toilets: Int
  # showers: Int
  # sink: Int
}

enum FeatureType {
  WIFI
  PARKING
  TV
  KITCHEN
  WASHER
  AIR_CONDITIONING
}

type Feature @model {
  
  # ðŸ›‘ Syntax Error: Expected Name, found BlockString "> Every GraphQL type with the @model directive will automatically have an id field set as the primary key.
  # https://docs.amplify.aws/cli/graphql/data-modeling/#configure-a-primary-key ".
  # id: ID!
  type: FeatureType!

  description: String
}